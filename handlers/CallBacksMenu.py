from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.types import FSInputFile
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from state.uload_log import Upload_logState
from state.upload_lotw import Upload_lotwState
from keyboards.inline_menu_kb import interlinemenu
from utils.database import Database
import os
import re


# from aiogram.types import Message, FSInputFile


async def CallBaksMenu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(callback.from_user.id)

    if (user):
        if (callback.data == 'upload_lotw'):
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –°–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞ —Å —Ñ–∞–π–ª–æ–º –∏–∑ LoTW')
            await bot.send_message(callback.from_user.id,
                                   f'üí° <b>–î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è \"—É—Ç–µ—á–µ–∫\" –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞ LoTW, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª <b>lotwreport.adi</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ LoTW.</b> \n\n'
                                   f'1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å LoTW \n'
                                   f'2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>Your QSOs</b> \n'
                                   f'3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>Download Report</b> \n'
                                   f'4Ô∏è‚É£ –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫–∏ <b>Include QSL details</b> –∏ –≤—Ç–æ—Ä–∞—è –≥–∞–ª–æ—á–∫–∞ –Ω–∞ <b>Include QSO station details (\"my\" station location fields)</b> \n'
                                   f'5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>Download Report</b> –∏ —Å–æ—Ö—Ä–∞–Ω–∏–µ —Ñ–∞–π–ª —Å–µ–±–µ –Ω–∞ –¥–∏—Å–∫ \n'
                                   f'6Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–∞–≤ –Ω–∞ üìé \n\n'
                                   f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—à–Ω–∏–µ–º —Å–ª–æ–≤–æ <b>–æ—Ç–º–µ–Ω–∞</b></i>')
            await state.clear()
            await state.set_state(Upload_lotwState.upload_adif_lotw.state)


        if (callback.data == 'download_log'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –°–∫–∞—á–∞—Ç—å –≤–µ—Å—å –ª–æ–≥ –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        if (callback.data == 'full_search'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª–æ–≥—É –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        if (callback.data == 'qo100_log'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
        if (callback.data == 'my_diploma'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –í—ã–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–æ–≤ –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

        if (callback.data == 'statistics'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

        if (callback.data == 'help'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ü–æ–º–æ—â—å –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')


        if (callback.data == 'upload_log'):
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥')
            await callback.message.answer(f'üí° <i><b>–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π ADIF —Ñ–∞–π–ª –¥–æ–ª–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ <b>10–ú–±</b> –∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏:</b></i> \n'
                                            f'‚ñ´Ô∏èQSO_DATE - –¥–∞—Ç–∞ QSO\n'
                                            f'‚ñ´Ô∏èTIME_ON - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ QSO\n'
                                            f'‚ñ´Ô∏èCALL - –ø–æ–∑—ã–≤–Ω–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n'
                                            f'‚ñ´Ô∏èMODE - –≤–∏–¥ —Å–≤—è–∑–∏\n'
                                            f'‚ñ´Ô∏èSUBMODE - –ø–æ–¥–≤–∏–¥ —Å–≤—è–∑–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∏–¥–æ–≤ \n'
                                            f'‚ñ´Ô∏è<b>BAND - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ 13CM</b>\n'
                                            f'‚ñ´Ô∏èGRIDSQUARE - –ª–æ–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n\n'
                                            f'üíæ <b>–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª ADIF –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.</b> \n\n'
                                            f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—à–Ω–∏–µ–º —Å–ª–æ–≤–æ <b>–æ—Ç–º–µ–Ω–∞</b></i>')
            await state.clear()
            await state.set_state(Upload_logState.upload_adif)



        # elif (callback.data == 'search_log'):
        #     await callback.message.delete()
        #     await callback.message.answer('–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥—É')
    else:
        await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ /start')

async def upload_adif_lotw(message: types.Message, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    users = db.select_user_id(message.from_user.id)
    if message.document:
        file = 'logs/' + users[1] + '_' + str(message.from_user.id) +'_lotw.txt'
        download_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=download_path)
        file_size = os.path.getsize(download_path)
        if (file_size > 12 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())
            return
        await lotw(users[1], download_path, message, bot, state)
        await state.clear()
        await bot.send_message(message.from_user.id, 'üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –ª–æ–≥—É. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á–∞—Å—Ç—å –ø–æ–∑—ã–≤–Ω–æ–≥–æ –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä–∞, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–º—É –ª–æ–≥—É –ø–æ –ø–æ–ª—é –ø–æ–∑—ã–≤–Ω–æ–π –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä.</i> \n\n –õ–∏–±–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())


async def upload_adif(message: types.Message, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    users = db.select_user_id(message.from_user.id)
    if message.document:
        file = 'logs/' + users[1] + '_' + str(message.from_user.id) +'.txt'
        download_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=download_path)
        file_size = os.path.getsize(download_path)
        if (file_size > 10 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())
            return
        # await bot.send_message(message.from_user.id, f'‚úÖ –§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º <b>{round(file_size/1024, 2)}</b>–ö–± –∑–∞–≥—Ä—É–∂–µ–Ω. QRX...')
        # await bot.send_message(message.from_user.id, '‚úÖ –ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞. QRX...')
        await adif(users[1], download_path, message, bot, state)
        # await bot.send_message(message.from_user.id, '‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∞. \n\n')
        await state.clear()
        await bot.send_message(message.from_user.id, 'üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –ª–æ–≥—É. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á–∞—Å—Ç—å –ø–æ–∑—ã–≤–Ω–æ–≥–æ –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä–∞, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–º—É –ª–æ–≥—É –ø–æ –ø–æ–ª—é –ø–æ–∑—ã–≤–Ω–æ–π –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä.</i> \n\n –õ–∏–±–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())



async def lotw(table_db: str, log: str, message: Message, bot: Bot, state):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)
    logbook = []
    # try:
    #     with open(log, 'r') as f:
    #         raw = f.read()
    #         # print(raw)
    #         raw = re.split('<eor>|<eoh>')
    raw = re.split('<EOR>|<EOH>', open(log, encoding="utf8", errors='ignore').read().upper(), flags=re.IGNORECASE)
    # except:
    #     await bot.send_message(message.from_user.id, '‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª –∏–∑ LoTW')
    #     return
    n = 0
    if (raw[0].split('\n')[0] == 'ARRL LOGBOOK OF THE WORLD STATUS REPORT'):
        try:
            for record in raw[1:-1]:
                qso = {}
                ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
                tags = ADIF_REC_RE.findall(record)
                for tag in tags:
                    qso[tag[0].lower()] = tag[2][:int(tag[1])]
                    if (qso[tag[0].lower()] == 'MFSK'):
                        qso[tag[0].lower()] = 'FT4'
                n += 1
                if ('gridsquare' not in qso): qso['gridsquare'] = None
                logbook.append(qso)
        except:
            await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')
    else:
        await bot.send_message(message.from_user.id, '‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å —Å–∞–π—Ç–∞ ARRL LoTW')

    if n > 0:
        await bot.send_message(message.from_user.id, f'‚úÖ –í —Ñ–∞–π–ª–µ <b>{n}</b> LoTW QSL. QRX...')
        data = []
        try:
            for i in range(len(logbook)):
                if ('prop_mode' in logbook[i] and 'sat_name' in logbook[i]):
                    if (logbook[i]['band'] == '13CM' and logbook[i]['prop_mode'] == 'SAT' and logbook[i]['sat_name'] == 'QO-100'):
                        data.append([logbook[i].get('call'), logbook[i].get('band'), logbook[i].get('mode'), logbook[i].get('qso_date'), logbook[i].get('time_on'), logbook[i].get('prop_mode'), logbook[i].get('sat_name'), logbook[i].get('qsl_rcvd'), logbook[i].get('dxcc'), logbook[i].get('country'), logbook[i].get('gridsquare'), logbook[i].get('cqz'), logbook[i].get('ituz')])
            db.add_table_user(user[1])
            db.add_user_lotw_data(user[1]+'_lotw', data)
        except:
            pass


        await bot.send_message(message.from_user.id, f'‚úÖ –î–∞–Ω–Ω—ã–µ LoTW –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')





async def adif(table_db: str, log: str, message: Message, bot: Bot, state):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)
    error = False
    file = 'logs/' + user[1] + '_bad_log.txt'
    upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    with open(upload_path, 'w'):   pass
    logbook = []
    try:
        raw = re.split('<EOR>|<EOH>', open(log, encoding="utf8", errors='ignore').read().upper(), flags=re.IGNORECASE)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª ADIF –ª–æ–≥–∞')
        return
    n = 0
    try:
        for record in raw[1:-1]:
            qso = {}
            ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
            tags = ADIF_REC_RE.findall(record)
            for tag in tags:
                qso[tag[0].lower()] = tag[2][:int(tag[1])]
                if (qso[tag[0].lower()] == 'MFSK'):
                    qso[tag[0].lower()] = 'FT4'
            n += 1
            if ('gridsquare' not in qso): qso['gridsquare'] = None
            logbook.append(qso)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')
    if n > 0:
        await bot.send_message(message.from_user.id, f'‚úÖ –í —Ñ–∞–π–ª–µ <b>{n}</b> QSO. QRX...')
        data = []
        for i in range(len(logbook)):
            if (logbook[i].get('call') is not None) and (logbook[i].get('qso_date') is not None) and (logbook[i].get('time_on') is not None) and (logbook[i].get('band') is not None) and (logbook[i].get('mode') is not None):
                data.append([logbook[i].get('call'), logbook[i].get('qso_date'), logbook[i].get('time_on'), logbook[i].get('band'), logbook[i].get('mode'), logbook[i].get('gridsquare')])

            else:
                error = True
                txt = '---=== –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ QSO ===---\n' + '; '.join([f'{key.capitalize()}: {value}' for key, value in logbook[i].items()]) + '\n\n'
                with open(upload_path, 'a', encoding='utf-8') as f:
                    f.write(txt)


        db.add_table_user(user[1])
        db.add_user_qso_data(user[1], data)
        await bot.send_message(message.from_user.id, f'‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        if error:
            await bot.send_message(message.from_user.id, f'‚ùå <b>–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.</b> \n\n üíæ <i>–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –±–∞–∑—É, –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∏–∂–µ üëá</i>')
            document = FSInputFile(upload_path)
            await bot.send_document(message.from_user.id, document)


    else:
        await bot.send_message(message.from_user.id, '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ QSO. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        return
