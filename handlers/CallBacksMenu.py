# -*- coding: UTF-8 -*-

from aiogram import Bot, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import Message, CallbackQuery
from aiogram.types import FSInputFile
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from state.uload_log import Upload_logState
from state.upload_lotw import Upload_lotwState
from state.conv_adif import Conv_AdifState
from keyboards.inline_menu_kb import interlinemenu
from utils.database import Database
from keyboards.inline_menu_kb import interlinemenu
from handlers.create_pdf import create_w100c_pdf, create_w100l_pdf, create_w1000b_pdf
import os
import re


# from aiogram.types import Message, FSInputFile


async def CallBaksMenu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(callback.from_user.id)

    if (user):
        if (callback.data == 'my_diploma'):
            '''
            –ö–Ω–æ–ø–∫–∞ –ú–æ–∏ –¥–∏–ø–ª–æ–º—ã

            '''
            await callback.message.delete()
            kb = InlineKeyboardBuilder()
            user = db.select_user_id(callback.from_user.id)[1]
            q_rus = len(db.get_stat_ru(user))
            q_rus_mark = '‚≠êÔ∏è' if q_rus >= 25 else  '‚ùå'
            q_loc = len(db.get_stat_loc(user))
            q_loc_mark = '‚≠êÔ∏è' if q_loc >= 500 else  '‚ùå'
            q_states = len(db.get_stat_states(user))
            q_states_mark = '‚≠êÔ∏è' if q_states >= 100 else  '‚ùå'
            q_unique = len(db.get_total_uniq_lotw(user))
            q_unique_mark = '‚≠êÔ∏è' if q_unique >= 1000 else  '‚ùå'
            q_base = db.get_total_qso_log(user)[0][0]
            q_base_mark = '‚≠êÔ∏è' if q_unique >= 1000 else  '‚ùå'
            kb.button(text=f'{q_rus_mark} W-QO100-R [{q_rus} –∏–∑ 25]', callback_data='dip_qo-100-russia')
            kb.button(text=f'{q_states_mark} W-QO100-C [{q_states} –∏–∑ 100]', callback_data='dip_qo-100-countries')
            kb.button(text=f'{q_loc_mark} W-QO100-L [{q_loc} –∏–∑ 500]', callback_data='dip_qo-100-locators')
            kb.button(text=f'{q_unique_mark} W-QO100-U [{q_unique} –∏–∑ 1000]', callback_data='dip_qo-100-unique')
            kb.button(text=f'{q_base_mark} W-QO100-B [{q_base} QSO]', callback_data='dip_qo-100-base')
            # kb.button(text='‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥ —Å LoTW', callback_data='upload_lotw')
            # kb.button(text='‚úó –û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
            kb.adjust(1)
            await bot.send_message(callback.from_user.id,
                                   f'üèÜ <b>–î–∏–ø–ª–æ–º–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üì° QO-100-RUSSIA</b> \n\n'
                                   f'‚û°Ô∏è <b>W-QO100-R</b> - —Ä–∞–±–æ—Ç–∞–ª —Å 25 —Ä–µ–≥–∏–æ–Ω–∞–º–∏ üá∑üá∫ –†–æ—Å—Å–∏–∏\n'
                                   f'‚û°Ô∏è <b>W-QO100-C</b> - —Ä–∞–±–æ—Ç–∞–ª —Å–æ 100 —Å—Ç—Ä–∞–Ω–∞–º–∏ –ø–æ —Å–ø–∏—Å–∫—É DXCC\n'
                                   f'‚û°Ô∏è <b>W-QO100-L</b> - —Ä–∞–±–æ—Ç–∞–ª —Å 500 —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ QTH –ª–æ–∫–∞—Ç–æ—Ä–∞–º–∏\n'
                                   f'‚û°Ô∏è <b>W-QO100-U</b> - —Ä–∞–±–æ—Ç–∞–ª —Å 1000 —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–æ–∑—ã–≤–Ω—ã–º–∏\n'
                                   f'‚û°Ô∏è <b>W-QO100-B</b> - –±–∞–∑–æ–≤—ã–π –¥–∏–ø–ª–æ–º, 1000 —Å–≤—è–∑–µ–π –≤ –ª–æ–≥–µ\n'
                                   f'\n<i>üí° –£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è —Ä–∞–¥–∏–æ—Å–≤—è–∑–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ LoTW</i>\n',
                                   reply_markup=kb.as_markup())


        if (callback.data == 'dip_qo-100-russia'):
            await bot.send_message(callback.from_user.id,
                                   f'‚ö†Ô∏è –í—ã–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–æ–≤ –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. QRX...')

# -----------------------------------------------------------------------------------------------------------------------------------------

        if (callback.data == 'dip_qo-100-locators'):
            await callback.message.delete()
            last_number = db.get_last_number_diplomas('w100l')[1]
            user = db.select_user_id(callback.from_user.id)[1]
            q_locators = len(db.get_stat_loc(user))
            if q_locators < 500:
                await bot.send_message(callback.from_user.id,
                                f'‚ö†Ô∏è –î–∏–ø–ª–æ–º <b>W-QO100-L</b> –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                f'‚ùóÔ∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–µ–Ω–∏—Ç—å QSL LoTW –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∑–∞ —Ä–∞–±–æ—Ç—É —Å 500 QTH –ª–æ–∫–∞—Ç–æ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ üõ∞ QO-100.\n'
                                f'üí° <i>–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –∏–∑ LoTW. \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ó–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥ —Å LoTW, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å LoTW</i>\n')
            else:
                last_number += 1
                res =db.check_call_diplomas(user, 'w100l')
                kb = InlineKeyboardBuilder()
                kb.button(text=f'‚úÖ –°–∫–∞—á–∞—Ç—å PDF', callback_data='get_pdf_w100l')
                kb.button(text='‚úó –û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
                kb.adjust(1)

                if res: # –µ—Å—Ç—å –≤ –±–∞–∑–µ

                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –í–∞–º –≤—ã–ø–∏—Å–∞–Ω –¥–∏–ø–ª–æ–º <b>W-QO100-L</b> #{res[0]}.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())
                else: # –Ω–µ—Ç –≤ –±–∞–∑–µ
                    db.add_call_diplomas(user, 'w100l', last_number)
                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –¥–∏–ø–ª–æ–º <b>W-QO100-L</b> #{last_number} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())

        if (callback.data == 'get_pdf_w100l'):
            user = db.select_user_id(callback.from_user.id)
            res =db.check_call_diplomas(user[1], 'w100l')
            # print('user', user)
            # print('res', res)
            locators = len(db.get_stat_loc(user[1]))
            # print('locs', locators)
            create_w100l_pdf(user[1], user[2], res, locators)
            await bot.send_message(callback.from_user.id, text=
                            f'üíæ PDF —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤. QRX... \n\n')
            pdf = user[1] + '_w500l.pdf'
            document = FSInputFile(pdf)
            await bot.send_document(callback.from_user.id, document)


# -----------------------------------------------------------------------------------------------------------------------------------------

        if (callback.data == 'dip_qo-100-countries'):
            await callback.message.delete()
            last_number = db.get_last_number_diplomas('w100c')[1]
            user = db.select_user_id(callback.from_user.id)[1]
            q_states = len(db.get_stat_states(user))
            if q_states < 100:
                await bot.send_message(callback.from_user.id,
                                f'‚ö†Ô∏è –î–∏–ø–ª–æ–º <b>W-QO100-C</b> –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                f'‚ùóÔ∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–µ–Ω–∏—Ç—å QSL LoTW –∫–∞–∫ –º–∏–Ω–∏–º—É–º –∑–∞ —Ä–∞–±–æ—Ç—É —Å–æ 100 —Å—Ç—Ä–∞–Ω–∞–º–∏ –ø–æ —Å–ø–∏—Å–∫—É DXCC —á–µ—Ä–µ–∑ üõ∞ QO-100.\n'
                                f'üí° <i>–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –∏–∑ LoTW. \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ó–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥ —Å LoTW, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –æ—Ç—á–µ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å LoTW</i>\n')
            else:
                last_number += 1
                res =db.check_call_diplomas(user, 'w100c')
                kb = InlineKeyboardBuilder()
                kb.button(text=f'‚úÖ –°–∫–∞—á–∞—Ç—å PDF', callback_data='get_pdf_w100c')
                kb.button(text='‚úó –û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
                kb.adjust(1)

                if res: # –µ—Å—Ç—å –≤ –±–∞–∑–µ

                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –í–∞–º –≤—ã–ø–∏—Å–∞–Ω –¥–∏–ø–ª–æ–º <b>W-QO100-C</b> #{res[0]}.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())
                else: # –Ω–µ—Ç –≤ –±–∞–∑–µ
                    db.add_call_diplomas(user, 'w100c', last_number)
                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –¥–∏–ø–ª–æ–º <b>W-QO100-C</b> #{last_number} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())

        if (callback.data == 'get_pdf_w100c'):
            user = db.select_user_id(callback.from_user.id)
            res =db.check_call_diplomas(user[1], 'w100c')
            states = len(db.get_stat_states(user[1]))
            # print(res)
            create_w100c_pdf(user[1], user[2], res[0], states)
            await bot.send_message(callback.from_user.id, text=
                            f'üíæ PDF —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤. QRX... \n\n')
            pdf = user[1] + '_w100c.pdf'
            document = FSInputFile(pdf)
            await bot.send_document(callback.from_user.id, document)

# -----------------------------------------------------------------------------------------------------------------------------------------




        if (callback.data == 'dip_qo-100-unique'):
            await bot.send_message(callback.from_user.id,
                                   f'‚ö†Ô∏è –í—ã–¥–∞—á–∞ –¥–∏–ø–ª–æ–º–æ–≤ –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. QRX...')

# -----------------------------------------------------------------------------------------------------------------------------------------

        if (callback.data == 'dip_qo-100-base'):
            await callback.message.delete()
            last_number = db.get_last_number_diplomas('w1000b')[1]
            user = db.select_user_id(callback.from_user.id)[1]
            q_qsos = db.get_total_qso_log(user)[0][0]
            if q_qsos < 1000:
                await bot.send_message(callback.from_user.id,
                                f'‚ö†Ô∏è –î–∏–ø–ª–æ–º <b>W-QO100-B</b> –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                f'‚ùóÔ∏è–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ 1000 QSO —á–µ—Ä–µ–∑ üõ∞ QO-100.\n'
                                f'üí° <i>–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ QSO –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥. \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ó–∞–≥—Ä—É–∑–∫—É –ª–æ–≥–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥</i>\n')
            else:
                last_number += 1
                res =db.check_call_diplomas(user, 'w1000b')
                kb = InlineKeyboardBuilder()
                kb.button(text=f'‚úÖ –°–∫–∞—á–∞—Ç—å PDF', callback_data='get_pdf_w1000b')
                kb.button(text='‚úó –û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
                kb.adjust(1)

                if res: # –µ—Å—Ç—å –≤ –±–∞–∑–µ

                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –í–∞–º –≤—ã–ø–∏—Å–∞–Ω –¥–∏–ø–ª–æ–º <b>W-QO100-L</b> #{res[0]}.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())
                else: # –Ω–µ—Ç –≤ –±–∞–∑–µ
                    print(res)
                    db.add_call_diplomas(user, 'w1000b', last_number)
                    await bot.send_message(callback.from_user.id,
                                    f'üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –¥–∏–ø–ª–æ–º <b>W-QO100-L</b> #{last_number} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n'
                                    'üí° <i>–î–∏–ø–ª–æ–º –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–ª–æ–º–∞—Ç–µ PDF</i>', reply_markup=kb.as_markup())

        if (callback.data == 'get_pdf_w1000b'):
            user = db.select_user_id(callback.from_user.id)
            res =db.check_call_diplomas(user[1], 'w1000b')
            # print('user', user)
            # print('res', res)
            qsos = db.get_total_qso_log(user[1])[0][0]
            # print('qsos', qsos)
            create_w1000b_pdf(user[1], user[2], res[0], qsos)
            await bot.send_message(callback.from_user.id, text=
                            f'üíæ PDF —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤. QRX... \n\n')
            pdf = user[1] + '_w1000b.pdf'
            document = FSInputFile(pdf)
            await bot.send_document(callback.from_user.id, document)


# -----------------------------------------------------------------------------------------------------------------------------------------


        if (callback.data == 'conv_log'):
            '''
            –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥

            '''
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä QO-100')
            await callback.message.answer(
                                            f'‚≠êÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –∫–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ ADIF —Ñ–æ—Ä–º–∞—Ç–µ. '
                                            f'–ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Å–µ —Ç–µ–≥–∏ BAND –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –Ω–∞ <b>13CM</b>, –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ <b>PROP_MODE —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º SAT</b> –∏ <b>SAT_NAME —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º QO-100</b>.\n\n'
                                            f'‚≠êÔ∏è <i>ADIF —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–¥–∞—Ç—å –º–∏–Ω–∏–º—É–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–µ–≥–æ–≤:</i> \n\n'
                                            f'‚ñ´Ô∏èQSO_DATE - –¥–∞—Ç–∞ QSO\n'
                                            f'‚ñ´Ô∏èTIME_ON - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ QSO\n'
                                            f'‚ñ´Ô∏èCALL - –ø–æ–∑—ã–≤–Ω–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n'
                                            f'‚ñ´Ô∏èMODE - –≤–∏–¥ —Å–≤—è–∑–∏\n'
                                            f'‚ñ´Ô∏èSUBMODE - –ø–æ–¥–≤–∏–¥ —Å–≤—è–∑–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∏–¥–æ–≤ \n'
                                            f'‚ñ´Ô∏èGRIDSQUARE - –ª–æ–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)\n\n'
                                            f'üíæ <b>–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∫–æ–Ω—Ñ–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ ADIF —Ñ–∞–π–ª –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–Ω–µ.</b> \n\n'
                                            f'‚ö†Ô∏è <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—à–Ω–∏–µ <b>–û—Ç–º–µ–Ω–∞</b></i>')
            await state.clear()
            await state.set_state(Conv_AdifState.conv_adif)



        if (callback.data == 'main_menu_upload'):
            '''
            –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å

            '''
            await callback.message.delete()
            kb = InlineKeyboardBuilder()
            kb.button(text='‚úì –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥', callback_data='upload_log'),
            kb.button(text='‚úì –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥ —Å LoTW', callback_data='upload_lotw')
            kb.button(text='‚úó –û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
            kb.adjust(1)
            await bot.send_message(callback.from_user.id,
                                   f'‚≠êÔ∏è –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –±–æ–ª–µ–µ <b>10–ú–±</b> –∑–∞ —Ä–∞–∑. \n'
                                   f'‚≠êÔ∏è –§–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤ <b>ADIF</b>. \n'
                                   f'‚≠êÔ∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –Ω–µ –ø–æ–ø–∞–¥–∞—é—Ç. \n'
                                   f'‚≠êÔ∏è –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –∑–∞ <b>QO-100</b> –¥–∏–∞–ø–∞p–æ–Ω <b>13CM</b>. \n', reply_markup=kb.as_markup())


        if (callback.data == 'upload_lotw'):
            '''
            –ö–Ω–æ–ø–∫–∞ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å LoTW
            '''
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –°–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ª–æ–≥–∞ —Å —Ñ–∞–π–ª–æ–º –∏–∑ LoTW')
            await bot.send_message(callback.from_user.id,
                                   f'‚≠êÔ∏è –î–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è \"—É—Ç–µ—á–µ–∫\" –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –º—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å–∞ LoTW, –∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞—é—Ç –¥—Ä—É–≥–∏–µ —Å–µ—Ä–≤–∏—Å—ã. –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ñ–∞–π–ª <b>lotwreport.adi</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞—Ç—å –∏–∑ —Å–≤–æ–µ–π –ª–∏—á–Ω–æ–π —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ LoTW. –°–∫–∞—á–∞–Ω–Ω—ã–π <b>lotwreport.adi</b> —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ <b>10–ú–±</b>. \n\n'
                                   f'1Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å LoTW \n'
                                   f'2Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>Your QSOs</b> \n'
                                   f'3Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ <b>Download Report</b> \n'
                                   f'4Ô∏è‚É£ –ü–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫–∏ <b>Include QSL details</b> –∏ –≤—Ç–æ—Ä–∞—è –≥–∞–ª–æ—á–∫–∞ –Ω–∞ <b>Include QSO station details (\"my\" station location fields)</b> \n'
                                   f'5Ô∏è‚É£ –ù–∏–∂–µ –≤—ã–±–∏—Ä–∏—Ç–µ –ø–æ–∑—ã–≤–Ω–æ–π \n'
                                   f'6Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ <b>Download Report</b> –∏ —Å–æ—Ö—Ä–∞–Ω–∏–µ —Ñ–∞–π–ª —Å–µ–±–µ –Ω–∞ –¥–∏—Å–∫ \n'
                                   f'7Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–∂–∞–≤ –Ω–∞ üìé \n\n'
                                   f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—à–Ω–∏–µ–º —Å–ª–æ–≤–æ <b>–û—Ç–º–µ–Ω–∞</b></i>')
            await state.clear()
            await state.set_state(Upload_lotwState.upload_adif_lotw.state)


        if (callback.data == 'drop_log'):
            '''
            –ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏

            '''
            kb = InlineKeyboardBuilder()
            kb.button(text='–£–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏', callback_data='del_yes'),
            kb.button(text='–û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
            kb.adjust(2)
            await callback.message.delete()
            await bot.send_message(callback.from_user.id,
                                   f'‚ö†Ô∏è <b>–í—ã –¥–µ–π—Å–≤—Ç–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç—Ç–µ —É–¥–∞–ª–∏—Ç—å –ª–æ–≥–∏?</b> \n\n'
                                   f'1Ô∏è‚É£ –ü–æ—Å–ª–µ —É–¥–∞–ª–Ω–µ–∏—è –ª–æ–≥–æ–≤ –±—É–¥–µ—Ç —Å–±—Ä–æ—à–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. \n'
                                   f'2Ô∏è‚É£ –ù–µ–ª—å–∑—è –ø–æ–ª—á–∏—Ç—å –¥–∏–ø–ª–æ–º—ã \n'
                                   f'3Ô∏è‚É£ –í –ª—é–±–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–∏ –ø–æ –Ω–æ–≤–æ–π. \n', reply_markup=kb.as_markup())
        if (callback.data == 'del_yes'):
            await callback.message.delete()
            db = Database(os.getenv('DATABASE_NAME'))
            user = db.select_user_id(callback.from_user.id)[1]
            db.delete_all_logs(user)
            await bot.send_message(callback.from_user.id,
                                   f'‚úÖ <b>–í–∞—à–∏ –ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã!</b>\n\n'
                                   f'<i>–õ–æ–≥–∏ –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–Ω–æ–≤–∞ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n</i>', reply_markup=interlinemenu())

        if (callback.data == 'clbk_cancel'):
            await callback.message.delete()
            await bot.send_message(callback.from_user.id,f'‚ùå <b>–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!</b>\n\n <b>‚ò∞ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())

        if (callback.data == 'download_log'):
            '''
            –ö–Ω–æ–ø–∫–∞ –°–∫–∞—á–∞—Ç—å
            '''
            await callback.message.delete()
            kb = InlineKeyboardBuilder()
            kb.button(text='–§–æ—Ä–º–∞—Ç CSV', callback_data='dwnl_log_csv'),
            kb.button(text='–§–æ—Ä–º–∞—Ç ADIF', callback_data='dwnl_log_adif')
            kb.button(text='–û—Ç–º–µ–Ω–∞', callback_data='clbk_cancel')
            kb.adjust(2)
            await bot.send_message(callback.from_user.id,
                                   f'‚ùì <b>–í –∫–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á—Ç—å –ª–æ–≥?</b> \n\n'
                                   f'1Ô∏è‚É£ CSV –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –≤ Excel \n'
                                   f'2Ô∏è‚É£ ADIF –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –¥—Ä—É–≥–∏–µ –ª–æ–≥–∏ \n', reply_markup=kb.as_markup())
        if (callback.data == 'dwnl_log_csv'):
            '''
            –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ

            '''
            await callback.message.delete()
            db = Database(os.getenv('DATABASE_NAME'))
            user = db.select_user_id(callback.from_user.id)[1]
            qsos = db.get_full_log(user)
            if len(qsos) != 0:
                file = 'logs/' + user + '_' +'.csv'
                file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
                with open(file_path, 'w') as f:
                    for i in range(len(qsos)):
                        L = ''
                        # L = f'{qsos[i][0]};{qsos[i][1]};{qsos[i][2]};{qsos[i][3]};{qsos[i][4]};{qsos[i][5]}\n'
                        L += str(qsos[i][0]) + ';'
                        L += str(qsos[i][1])  + ';'
                        L += str(qsos[i][2]) + ';'
                        L += str(qsos[i][3]) + ';'
                        L += str(qsos[i][4]) + ';'
                        L += str(qsos[i][5]) + ';'
                        L += str(qsos[i][6]) + ';'
                        L += '\n'
                        f.writelines(L)
                await bot.send_message(callback.from_user.id, text=
                            f'üìå <b>{user}</b> –≤ –ª–æ–≥–µ <b>{len(qsos)}</b> QSO.\n\n'
                            f'üíæ –§–∞–π–ª –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV –Ω–∏–∂–µ üëá \n\n'
                            )
                document = FSInputFile(file_path)
                await bot.send_document(callback.from_user.id, document)
            else:
                await bot.send_message(callback.from_user.id, text='‚ùå –ß—Ç–æ–±—ã —á—Ç–æ-—Ç–æ —Å–∫–∞—á–∞—Ç—å, –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å!')


        if (callback.data == 'dwnl_log_adif'):
            '''
            –°–∫–∞—á–∞—Ç—å –ª–æ–≥ –≤ ADIF —Ñ–æ—Ä–º–∞—Ç–µ

            '''
            await callback.message.delete()
            db = Database(os.getenv('DATABASE_NAME'))
            user = db.select_user_id(callback.from_user.id)[1]
            qsos = db.get_full_log(user)
            if len(qsos) != 0:
                file = 'logs/' + user + '_' +'.adif'
                file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
                with open(file_path, 'w') as f:
                    L = f'TLog ADIF export file for {user}\n<EOH>\n'
                    f.writelines(L)
                    for i in range(len(qsos)):
                        L = ''
                        L += f'<CALL:{len(qsos[i][4].strip())}>{qsos[i][4].strip()}'
                        qso_date = qsos[i][0].replace('-', '')
                        L += f'<QSO_DATE:{len(qso_date)}>{qso_date}'
                        time_on = qsos[i][1].replace(':', '')
                        L += f'<TIME_ON:{len(time_on)}>{time_on}'
                        L += f'<BAND:{len(qsos[i][2].strip())}>{qsos[i][2].strip()}'
                        L += f'<MODE:{len(qsos[i][3].strip())}>{qsos[i][3].strip()}'
                        if qsos[i][5] is not None:
                            L += f'<GRIDSQUARE:{len(qsos[i][5].strip())}>{qsos[i][5].strip()}'
                        L += f'<OPERATOR:{len(qsos[i][6].strip())}>{qsos[i][6].strip()}'
                        L += f'<EOR>\n'
                        f.writelines(L)
                await bot.send_message(callback.from_user.id, text=
                            f'üìå <b>{user}</b> –≤ –ª–æ–≥–µ <b>{len(qsos)}</b> QSO.\n\n'
                            f'üíæ –§–∞–π–ª –ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ADIF –Ω–∏–∂–µ üëá \n\n'
                            )
                document = FSInputFile(file_path)
                await bot.send_document(callback.from_user.id, document)
            else:
                await bot.send_message(callback.from_user.id, text='‚ùå –ß—Ç–æ–±—ã —á—Ç–æ-—Ç–æ —Å–∫–∞—á–∞—Ç—å, –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å!')



        if (callback.data == 'full_search'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ü–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ª–æ–≥—É –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

        if (callback.data == 'qo100_log'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')

        if (callback.data == 'statistics'):
            db = Database(os.getenv('DATABASE_NAME'))
            user = db.select_user_id(callback.from_user.id)[1]
            try:
                total_qsos_log = db.get_total_qso_log(user)
                total_qsos_lotw = db.get_total_qso_lotw(user)
                total_by_band = db.get_stat_bands(user)
                band_msg = 'üëÄ <b>–ü–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ª–æ–≥–µ:</b>\n'
                for i  in range(len(total_by_band)):
                    band_msg += f'‚ñ´Ô∏è {total_by_band[i][0]} ‚ñ´Ô∏è {total_by_band[i][1]} ‚ñ´Ô∏è {total_by_band[i][2]} QSO\n'
                qsos = total_qsos_log[0][0]
                lotws = total_qsos_lotw[0][0]
                dxcc =  db.get_stat_states(user)
                qra =  db.get_stat_loc(user)
                cqz =  db.get_stat_cqz(user)
                ituz =  db.get_stat_ituz(user)
                uniq_log = db.get_total_uniq_log(user)
                uniq_lotw = db.get_total_uniq_lotw(user)
                # await callback.message.delete()
                await bot.send_message(callback.from_user.id,
                                    f'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–æ–≥—É <b>{user}</b>\n\n'
                                    f'‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –ª–æ–≥:  <b>{qsos}</b> QSO\n'
                                    f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ LoTW:  <b>{lotws}</b> CFM\n\n'
                                    f'‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã—Ö –Ω–∞ üõ∞ QO-100:\n'
                                    f'‚ñ´Ô∏è –ø–æ –ª–æ–≥—É:  <b>{len(uniq_log)}</b> \n'
                                    f'‚ñ´Ô∏è –ø–æ LoTW:  <b>{len(uniq_lotw)}</b> \n\n'
                                    f'{band_msg}'
                                    f'\n\nüèÜ <b>–ü–û –î–ò–ü–õ–û–ú–ê–ú –ù–ê üõ∞ QO-100</b>\n'
                                    f'‚ñ´Ô∏èLoTW DXCC:  {len(dxcc)} \n'
                                    f'‚ñ´Ô∏èLoTW QRA –ª–æ–∫–∞—Ç–æ—Ä–æ–≤:  {len(qra)} \n'
                                    f'‚ñ´Ô∏èLoTW CQ –∑–æ–Ω:  {len(cqz)} \n'
                                    f'‚ñ´Ô∏èLoTW ITU –∑–æ–Ω:  {len(ituz)} \n'
                                    f'\n\nüí° <i>–î–ª—è –¥–æ–ø–æ–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã:</i>\n'
                                    f'/stat_states - —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—ã—Ö DXCC —Å—Ç—Ä–∞–Ω –∏–∑ LoTW\n'
                                    f'/stat_loc - —Å–ø–∏–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—ã—Ö –ª–æ–∫–∞—Ç–æ—Ä–æ–≤ –∏–∑ LoTW\n'
                                    f'/stat_cqz - —Å–ø–∏–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—ã—Ö CQ –∑–æ–Ω –∏–∑ LoTW\n'
                                    f'/stat_ituz - —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—ã—Ö ITU –∑–æ–Ω –∏–∑ LoTW\n'
                                    f'/stat_ru - CFM –†–æ—Å—Å–∏–π—Å–∫–∏–µ —Ä–µ–≥–∏–æ–Ω—ã –≤ LoTW\n'
                                    f'/uniq_log - —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã—Ö –ø–æ –ª–æ–≥—É\n'
                                    f'/uniq_lotw - —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã—Ö –ø–æ LoTW\n'

                                    )
            except:
                await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –õ–æ–≥–∏ –ª–∏–±–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ª–∏–±–æ –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.')

        if (callback.data == 'help'):
            await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –ü–æ–º–æ—â—å –≤ —Å—Ç–∞–¥–∏–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')


        if (callback.data == 'upload_log'):
            '''
            –ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ ADIF

            '''
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥')
            await callback.message.answer(f'‚≠êÔ∏è <i><b>ADIF —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–¥–∞—Ç—å —Ç–µ–≥–∏:</b></i> \n\n'
                                            f'‚ñ´Ô∏èQSO_DATE - –¥–∞—Ç–∞ QSO\n'
                                            f'‚ñ´Ô∏èTIME_ON - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ QSO\n'
                                            f'‚ñ´Ô∏èCALL - –ø–æ–∑—ã–≤–Ω–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n'
                                            f'‚ñ´Ô∏èMODE - –≤–∏–¥ —Å–≤—è–∑–∏\n'
                                            f'‚ñ´Ô∏èSUBMODE - –ø–æ–¥–≤–∏–¥ —Å–≤—è–∑–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∏–¥–æ–≤ \n'
                                            f'‚ñ´Ô∏è<b>BAND - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ 13CM</b>\n'
                                            f'‚ñ´Ô∏èGRIDSQUARE - –ª–æ–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ)\n\n'
                                            f'üíæ <b>–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª –ª–æ–≥–∞ –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–Ω–µ.</b> \n\n'
                                            f'‚ö†Ô∏è <i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—à–Ω–∏–µ <b>–û—Ç–º–µ–Ω–∞</b></i>')
            await state.clear()
            await state.set_state(Upload_logState.upload_adif)



        # elif (callback.data == 'search_log'):
        #     await callback.message.delete()
        #     await callback.message.answer('–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥—É')
    else:
        await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ /start')

async def upload_adif_lotw(message: types.Message, state: FSMContext, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ–≥–æ ADIF LoTW

    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    if message.document:
        file = 'logs/' + user + '_' + str(message.from_user.id) +'_lotw.txt'
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=file_path)
        file_size = os.path.getsize(file_path)
        if (file_size > 12 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –±–æ–ª–µ–µ <b>12–ú–±</b>.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '<b>‚ò∞ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())
            return
        await lotw(file_path, message, bot)
        await state.clear()
        await bot.send_message(message.from_user.id, 'üí° <i>–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –ø–æ –ª–æ–≥—É. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á–∞—Å—Ç—å –ø–æ–∑—ã–≤–Ω–æ–≥–æ –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä–∞, —Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ–∏—Å–∫ –ø–æ –≤–∞—à–µ–º—É –ª–æ–≥—É –ø–æ –ø–æ–ª—é –ø–æ–∑—ã–≤–Ω–æ–π –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä.</i> \n\n –õ–∏–±–æ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())


async def upload_adif(message: types.Message, state: FSMContext, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ–≥–æ ADIF –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥

    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    if message.document:
        file = 'logs/' + user + '_' + str(message.from_user.id) +'.txt'
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=file_path)
        file_size = os.path.getsize(file_path)
        if (file_size > 10 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–ú–±.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())
            return
        # –æ–±—Ä–∞—é–±–æ—Ç–∫–∞ ADIF
        await adif(file_path, message, bot)
        await state.clear()
        await bot.send_message(message.from_user.id, 'üí° <i>–û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω. –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥—É –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–∑—ã–≤–Ω–æ–π –∏–ª–∏ –ª–æ–∫–∞—Ç–æ—Ä.</i> \n\n ‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())



async def lotw(file_path: str, message: Message, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ LoTW ADIF —Ñ–∞–π–ª–∞
    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    logbook = []
    raw = re.split('<EOR>|<EOH>', open(file_path, encoding="utf8", errors='ignore').read().upper(), flags=re.IGNORECASE)
    if (raw[0].split('\n')[0] == 'ARRL LOGBOOK OF THE WORLD STATUS REPORT'):
        try:
            for record in raw[1:-1]:
                if (':0><' in record): record = record.replace(':0><', ':1> <')
                qso = {}
                ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
                tags = ADIF_REC_RE.findall(record)
                for tag in tags:
                    qso[tag[0].lower()] = tag[2][:int(tag[1])]
                    if (qso[tag[0].lower()] == 'MFSK'):
                        qso[tag[0].lower()] = 'FT4'
                if ('gridsquare' not in qso): qso['gridsquare'] = None
                if ('state' not in qso): qso['state'] = None
                if ('operator' not in qso): qso['operator'] = user
                logbook.append(qso)
        except:
            await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')
    else:
        await bot.send_message(message.from_user.id, '‚ùå –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å —Å–∞–π—Ç–∞ ARRL LoTW')

    if (len(logbook) > 0):
        # n = len(logbook)
        await bot.send_message(message.from_user.id, f'‚úÖ –í —Ñ–∞–π–ª–µ LoTW <b>{len(logbook)}</b> QSL.')
        data = []
        try:
            n = 0
            for i in range(len(logbook)):
                if ('prop_mode' in logbook[i] and 'sat_name' in logbook[i]):
                    if (logbook[i]['band'] == '13CM' and logbook[i]['prop_mode'] == 'SAT' and logbook[i]['sat_name'] == 'QO-100'):
                        qso_date = logbook[i].get('qso_date')[:4] + '-' + logbook[i].get('qso_date')[4:6] + '-' + logbook[i].get('qso_date')[6:]
                        time_on = logbook[i].get('time_on')[:2] + ':' + logbook[i].get('time_on')[2:4] + ':' + logbook[i].get('time_on')[4:6]
                        data.append([logbook[i].get('call'), logbook[i].get('band'), logbook[i].get('mode'), qso_date, time_on, logbook[i].get('prop_mode'), logbook[i].get('sat_name'), logbook[i].get('qsl_rcvd'), logbook[i].get('dxcc'), logbook[i].get('country'), logbook[i].get('gridsquare'), logbook[i].get('state'), logbook[i].get('cqz'), logbook[i].get('ituz'), logbook[i].get('operator')])
                        n += 1
        except:
            pass
        db.add_table_user(user)
        db.add_user_lotw_data(user+'_lotw', data)


        await bot.send_message(message.from_user.id, f'‚úÖ <b>{n}</b> QO-100 LoTW QSL –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É.')





async def adif(file_log: str, message: Message, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ADIF –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞

    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    error = False
    file = 'logs/' + user + '_bad_log.txt'
    bad_file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    with open(bad_file_path, 'w'):   pass
    logbook = []
    try:
        raw = re.split('<EOR>|<EOH>', open(file_log, encoding="utf8", errors='ignore').read().upper(), flags=re.IGNORECASE)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª ADIF –ª–æ–≥–∞')
        return
    try:
        for record in raw[1:-1]:
            if (':0><' in record): record = record.replace(':0><', ':1> <')
            qso = {}
            ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
            tags = ADIF_REC_RE.findall(record)
            for tag in tags:
                qso[tag[0].lower()] = tag[2][:int(tag[1])]
                if (qso[tag[0].lower()] == 'MFSK'):
                    qso[tag[0].lower()] = 'FT4'
            if ('gridsquare' not in qso): qso['gridsquare'] = None
            if ('rst_rcvd' not in qso): qso['rst_rcvd'] = None
            if ('rst_sent' not in qso): qso['rst_sent'] = None
            logbook.append(qso)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')

    if len(logbook) > 0:
        sum_qso = len(logbook)
        await bot.send_message(message.from_user.id, f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ <b>{sum_qso}</b> QSO. QRX...')
        data = []
        n = 0
        for i in range(len(logbook)):
            if (logbook[i].get('call') is not None) and (logbook[i].get('qso_date') is not None) and (logbook[i].get('time_on') is not None) and (logbook[i].get('band') is not None) and (logbook[i].get('mode') is not None):
                qso_date = logbook[i].get('qso_date')[:4] + '-' + logbook[i].get('qso_date')[4:6] + '-' + logbook[i].get('qso_date')[6:]
                time_on = logbook[i].get('time_on')[:2] + ':' + logbook[i].get('time_on')[2:4] + ':' + logbook[i].get('time_on')[4:6]
                logbook[i]['operator'] = user
                if (logbook[i].get('band') == '13CM'):
                    data.append([logbook[i].get('call'), qso_date, time_on, logbook[i].get('band'), logbook[i].get('mode'), logbook[i].get('gridsquare'), logbook[i].get('operator'), logbook[i].get('rst_rcvd'), logbook[i].get('rst_sent')])
                    n += 1
            else:
                error = True
                txt = '---=== –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ QSO ===---\n' + '; '.join([f'{key.capitalize()}: {value}' for key, value in logbook[i].items()]) + '\n\n'
                with open(bad_file_path, 'a', encoding='utf-8') as f:
                    f.write(txt)
        db.add_table_user(user)
        db.add_user_qso_data(user, data)
        await bot.send_message(message.from_user.id, f'‚úÖ <b>{n}</b> QSO –∑–∞ –¥–∏–∞–ø–∞–∑–æ–Ω 13–°–ú –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É. \n')
        if error:
            await bot.send_message(message.from_user.id, f'‚ùå <b>–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.</b> \n\n üíæ <i>–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –±–∞–∑—É, –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∏–∂–µ üëá</i>')
            document = FSInputFile(bad_file_path)
            await bot.send_document(message.from_user.id, document)
    else:
        await bot.send_message(message.from_user.id, '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ QSO. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        return


async def conv_adif(message: types.Message, state: FSMContext, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ü–∏–∏ ADIF —Ñ–∞–π–ª–∞

    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    if message.document:
        pass
        file = 'logs/' + user + '_' + str(message.from_user.id) +'_conv.adi'
        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=file_path)
        file_size = os.path.getsize(file_path)
        if (file_size > 10 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 10–ú–±.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())
            return
        # –æ–±—Ä–∞—é–±–æ—Ç–∫–∞ ADIF
        await conv_adif_process(file_path, message, bot)
        await state.clear()
        await bot.send_message(message.from_user.id, '‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ADIF –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '‚ò∞ <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>', reply_markup=interlinemenu())

async def conv_adif_process(file_log: str, message: Message, bot: Bot):
    '''
    –û–±—Ä–∞–±–æ—Ç–∫–∞ ADIF –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–∞

    '''
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    error = False
    file = 'logs/' + user + '_conv.adi'
    file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    logbook = []
    try:
        raw = re.split('<EOR>|<EOH>', open(file_log, encoding="utf8", errors='ignore').read().upper(), flags=re.IGNORECASE)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª ADIF –ª–æ–≥–∞')
        return
    try:
        for record in raw[1:-1]:
            if (':0><' in record): record = record.replace(':0><', ':1> <')
            qso = {}
            ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
            tags = ADIF_REC_RE.findall(record)
            for tag in tags:
                qso[tag[0].lower()] = tag[2][:int(tag[1])]
            # if ('gridsquare' not in qso): qso['gridsquare'] = ' '
            logbook.append(qso)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')

    if len(logbook) > 0:
        sum_qso = len(logbook)
        await bot.send_message(message.from_user.id, f'‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª —Å <b>{sum_qso}</b> QSO.')
        data = []
        with open(file_path, 'w') as f:
            str = f'TLog converter for {user}\n<EOH>\n'
            f.writelines(str)
            for i in range(len(logbook)):
                logbook[i]['prop_mode'] = 'SAT'
                logbook[i]['sat_name'] = 'QO-100'
                logbook[i]['band'] = '13CM'
                # logbook[i]['operator'] = user
                str = ''
                for key in logbook[i]:
                    str += f'<{key.upper()}:{len(logbook[i][key])}>{logbook[i][key].upper()} '
                str += '<EOR>\n'
                f.writelines(str)
        await bot.send_message(message.from_user.id, f'üíæ –§–∞–π–ª ADIF –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω üëá')
        document = FSInputFile(file_path)
        await bot.send_document(message.from_user.id, document)


    else:
        await bot.send_message(message.from_user.id, '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ QSO. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        return
