from aiogram import Bot, types
from aiogram.types import Message, CallbackQuery
from aiogram.types import FSInputFile
from aiogram import F
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from state.uload_log import Upload_logState
from keyboards.inline_menu_kb import interlinemenu
from utils.database import Database
import os
import re


# from aiogram.types import Message, FSInputFile


async def CallBaksMenu(callback: CallbackQuery, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(callback.from_user.id)
    if (user):
        if (callback.data == 'upload_log'):
            await callback.message.delete()
            await callback.message.answer(f'<b>–í—ã–±—Ä–∞–Ω–æ</b>: –ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥')
            await callback.message.answer(f'üí° <i><b>–ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π ADIF —Ñ–∞–π–ª –¥–æ–ª–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑–º–µ—Ä–æ–º –Ω–µ –±–æ–ª–µ–µ <b>10–ú–±</b> –∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏:</b></i> \n'
                                            f'‚ñ´Ô∏èQSO_DATE - –¥–∞—Ç–∞ QSO\n'
                                            f'‚ñ´Ô∏èTIME_ON - –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–æ QSO\n'
                                            f'‚ñ´Ô∏èCALL - –ø–æ–∑—ã–≤–Ω–æ–π –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n'
                                            f'‚ñ´Ô∏èMODE - –≤–∏–¥ —Å–≤—è–∑–∏\n'
                                            f'‚ñ´Ô∏èSUBMODE - –ø–æ–¥–≤–∏–¥ —Å–≤—è–∑–∏, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤–∏–¥–æ–≤ \n'
                                            f'‚ñ´Ô∏è<b>BAND - –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω –∫–∞–∫ 13CM</b>\n'
                                            f'‚ñ´Ô∏èGRIDSQUARE - –ª–æ–∫–∞—Ç–æ—Ä –∫–æ—Ä—Ä–µ—Å–ø–æ–Ω–¥–µ–Ω—Ç–∞\n\n'
                                            f'üíæ <b>–ß—Ç–æ–±—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ üìé –Ω–∏–∂–µ, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª ADIF –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.</b> \n\n'
                                            f'<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—à–Ω–∏–µ–º —Å–ª–æ–≤–æ <b>–æ—Ç–º–µ–Ω–∞</b></i>')
            await state.set_state(Upload_logState.upload_adif)


        elif (callback.data == 'search_log'):
            await callback.message.delete()
            await callback.message.answer('–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥—É')
    else:
        await bot.send_message(callback.from_user.id, f'‚ö†Ô∏è –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –í–≤–µ–¥–∏—Ç–µ /start')


async def upload_adif(message: types.Message, state: FSMContext, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    users = db.select_user_id(message.from_user.id)
    if message.document:
        file = 'logs\\' + users[1] + '_' + str(message.from_user.id) +'.txt'
        download_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
        await message.bot.download(message.document, destination=download_path)
        file_size = os.path.getsize(download_path)
        if (file_size > 10 * 1024 * 1024):
            await bot.send_message(message.from_user.id, '‚õîÔ∏è –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π.\n\n')
            await state.clear()
            await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–∏—Ä—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())
            return
        # await bot.send_message(message.from_user.id, f'‚úÖ –§–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º <b>{round(file_size/1024, 2)}</b>–ö–± –∑–∞–≥—Ä—É–∂–µ–Ω. QRX...')
        # await bot.send_message(message.from_user.id, '‚úÖ –ù–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞. QRX...')
        await adif(users[1], download_path, message, bot, state)
        # await bot.send_message(message.from_user.id, '‚úÖ –í—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∞. \n\n')
        await state.clear()
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–∏—Ä—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())
    else:
        await message.reply("‚õîÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞ –ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        await state.clear()
        await bot.send_message(message.from_user.id, '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–∏—Ä—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=interlinemenu())




async def adif(table_db: str, log: str, message: Message, bot: Bot, state):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)
    error = False
    file = 'logs\\' + user[1] + '_bad_log.txt'
    upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    with open(upload_path, 'w'):   pass
    logbook = []
    try:
        raw = re.split('<EOR>|<EOH>', open(log).read().upper(), flags=re.IGNORECASE)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –≠—Ç–æ –Ω–µ —Ñ–∞–π–ª ADIF –ª–æ–≥–∞')
        return
    n = 0
    try:
        for record in raw[1:-1]:
            qso = {}
            ADIF_REC_RE = re.compile(r'<(.*?):(\d+).*?>([^<\t\f\v]+)')
            tags = ADIF_REC_RE.findall(record)
            for tag in tags:
                qso[tag[0].lower()] = tag[2][:int(tag[1])]
                if (qso[tag[0].lower()] == 'MFSK'):
                    qso[tag[0].lower()] = 'FT4'
            n += 1
            if ('gridsquare' not in qso): qso['gridsquare'] = None
            logbook.append(qso)
    except:
        await bot.send_message(message.from_user.id, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã ADIF —Ç–µ–≥–∏.')
    if n > 0:
        await bot.send_message(message.from_user.id, f'‚úÖ –í —Ñ–≤–π–ª–µ <b>{n}</b> QSO. QRX...')
        data = []
        for i in range(len(logbook)):
            if (logbook[i].get('call') is not None) and (logbook[i].get('qso_date') is not None) and (logbook[i].get('time_on') is not None) and (logbook[i].get('band') is not None) and (logbook[i].get('mode') is not None):
                data.append([logbook[i].get('call'), logbook[i].get('qso_date'), logbook[i].get('time_on'), logbook[i].get('band'), logbook[i].get('mode'), logbook[i].get('gridsquare')])

            else:
                error = True
                txt = '---=== –ù–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ QSO ===---\n' + '; '.join([f'{key.capitalize()}: {value}' for key, value in logbook[i].items()]) + '\n\n'
                with open(upload_path, 'a', encoding='utf-8') as f:
                    f.write(txt)


        db.add_table_user(user[1])
        a = db.add_user_qso_data(user[1], data)
        await bot.send_message(message.from_user.id, f'‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö')
        if error:
            await bot.send_message(message.from_user.id, f'‚ùå <b>–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏.</b> \n\n üíæ <i>–î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ –±–∞–∑—É, –≤ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∏–∂–µ üëá</i>')
            document = FSInputFile(upload_path)
            await bot.send_document(message.from_user.id, document)


    else:
        await bot.send_message(message.from_user.id, '‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ QSO. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.')
        return
