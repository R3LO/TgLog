from aiogram import Bot
from aiogram.types import FSInputFile
from aiogram.types import Message
from keyboards.register_kb import register_keyboard
from keyboards.main_kb import main_kb
from utils.database import Database
import os
import math

async def get_start(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    users = db.select_user_id(message.from_user.id)
    if (users):
        await bot.send_message(message.from_user.id, f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ üëá\n\n', reply_markup=main_kb)
    else:
        await bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n'
                            f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –≥—Ä—É–ø–ø—ã üì° <b>QO-100-RUSSIA</b> \n'
                            f'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: <b>–í–ª–∞–¥–∏–º–∏—Ä R3LO</b> \n\n'
                            f'–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: \n'
                            f'‚û°Ô∏è –í–µ–¥–µ–Ω–∏–µ –∞–ø–ø–∞—Ä—Ç–∞–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ \n'
                            f'‚û°Ô∏è –ü–æ–∏—Å–∫ QSO –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –ª–æ–≥–µ \n'
                            f'‚û°Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–≥–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã \n'
                            f'‚û°Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ª–æ–≥ —Å LoTW \n'
                            f'‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ª–æ–≥ –≤ ADIF —Ñ–æ—Ä–º–∞—Ç–µ \n'
                            f'‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–∏–ø–ª–æ–º–æ–≤ \n\n'
                            f'üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ–æ–±—â–∏–≤ —Å–≤–æ–π –ø–æ–∑—ã–≤–Ω–æ–π –∏ –∏–º—è. –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø üëá',
                            reply_markup=register_keyboard
)


async def get_menu(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    users = db.select_user_id(message.from_user.id)
    if (users):
        await bot.send_message(message.from_user.id, f'–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ üëá\n\n', reply_markup=main_kb)
    else:
        await bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n\n'
                            f'–î–∞–Ω–Ω—ã–π –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –≥—Ä—É–ø–ø—ã üì° <b>QO-100-RUSSIA</b> \n'
                            f'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞: <b>–í–ª–∞–¥–∏–º–∏—Ä R3LO</b> \n\n'
                            f'–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞: \n'
                            f'‚û°Ô∏è –í–µ–¥–µ–Ω–∏–µ –∞–ø–ø–∞—Ä—Ç–∞–Ω–æ–≥–æ –∂—É—Ä–Ω–∞–ª–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ \n'
                            f'‚û°Ô∏è –ü–æ–∏—Å–∫ QSO –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º –ª–æ–≥–µ \n'
                            f'‚û°Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ª–æ–≥–∞ –≤ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã \n'
                            f'‚û°Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ª–æ–≥ —Å LoTW \n'
                            f'‚û°Ô∏è –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ª–æ–≥ –≤ ADIF —Ñ–æ—Ä–º–∞—Ç–µ \n'
                            f'‚û°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö –¥–∏–ø–ª–æ–º–æ–≤ \n\n'
                            f'üí° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–∏–º –¥–∞–Ω–Ω—ã–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, —Å–æ–æ–±—â–∏–≤ —Å–≤–æ–π –ø–æ–∑—ã–≤–Ω–æ–π –∏ –∏–º—è. –í—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –≤–∞—à–µ–º –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–∂–∏–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø üëá',
                            reply_markup=register_keyboard
)

async def get_stat_states(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    stat_dxcc = db.get_stat_states(user)
    msg = f'üèÜ <b>DXCC LoTW CFM for {user} —Ç–æ–ª—å–∫–æ –¥–ª—è üõ∞ QO-100</b>\n(NN -- COUNTRY -- CALLSIGN -- CFM QSOs)\n'
    for i in range(len(stat_dxcc)):
        msg += f'{i+1}   {stat_dxcc[i][0]}   {stat_dxcc[i][1]}    {stat_dxcc[i][2]}\n'
    await bot.send_message(message.from_user.id,
                           f'{msg}\n üëç –í–°–ï–ì–û CFM DXCC: <b>{i+1}</b>'
                           )

async def get_stat_cqz(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    stat_cqz = db.get_stat_cqz(user)
    msg = f'üèÜ <b>CQ Zones LoTW CFM for {user} —Ç–æ–ª—å–∫–æ –¥–ª—è üõ∞ QO-100</b>\n(CQ ZONE -- CALLSIGN)\n'
    for i in range(len(stat_cqz)):
        msg += f'{stat_cqz[i][0]}   {stat_cqz[i][1]}\n'
    await bot.send_message(message.from_user.id,
                           f'{msg}\n üëç –í–°–ï–ì–û CQ –∑–æ–Ω: <b>{i+1}</b>'
                           )

async def get_stat_ituz(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    stat_ituz = db.get_stat_ituz(user)
    msg = f'üèÜ <b>ITU Zones LoTW CFM for {user} —Ç–æ–ª—å–∫–æ –¥–ª—è üõ∞ QO-100</b>\n(ITU ZONE -- CALLSIGN)\n'
    for i in range(len(stat_ituz)):
        msg += f'{stat_ituz[i][0]}   {stat_ituz[i][1]}\n'
    await bot.send_message(message.from_user.id,
                           f'{msg}\n üëç –í–°–ï–ì–û ITU –∑–æ–Ω: <b>{i+1}</b>'
                           )

async def get_uniq_log(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    uniq_log = db.get_total_uniq_log(user)
    file = 'logs/' + user + '_uniq_log.txt'
    upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    txt = f'---=== {user}: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã–∑ –∏–∑ –≤–∞—à–µ–≥–æ –ª–æ–≥–∞ ===---\n\n'
    for i in range(len(uniq_log)):
        txt += f'{i+1}:  {uniq_log[i][0]}  {uniq_log[i][1]}  {uniq_log[i][2]}   {uniq_log[i][3]}  {uniq_log[i][4]}\n'
    with open(upload_path, 'w', encoding='utf-8') as f:
        f.write(txt)
    await bot.send_message(message.from_user.id, text=
                        f'üìå <b>{user}</b> –≤ –ª–æ–≥–µ <b>{len(uniq_log)}</b> –ø–æ–∑—ã–≤–Ω—ã—Ö —é–Ω–∏–∫–∞–ª—å–Ω—ã–µ.\n\n'
                        f'üíæ –§–∞–π–ª —Å–æ —Å–ø–∏—Å–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã—Ö –Ω–∏–∂–µ üëá \n\n'
                        )
    document = FSInputFile(upload_path)
    await bot.send_document(message.from_user.id, document)


async def get_uniq_lotw(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    uniq_lotw = db.get_total_uniq_lotw(user)
    file = 'logs/' + user + '_uniq_lotw.txt'
    upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    txt = f'---=== {user}: –°–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã–∑ –∏–∑ LoTW ===---\n\n'
    for i in range(len(uniq_lotw)):
        txt += f'{i+1}:  {uniq_lotw[i][0]}  {uniq_lotw[i][1]}  {uniq_lotw[i][2]}   {uniq_lotw[i][3]}  {uniq_lotw[i][4]}\n'
    with open(upload_path, 'w', encoding='utf-8') as f:
        f.write(txt)
    await bot.send_message(message.from_user.id, text=
                        f'üìå <b>{user}</b> –≤ –ª–æ–≥–µ <b>{len(uniq_lotw)}</b> –ø–æ–∑—ã–≤–Ω—ã—Ö –∏–∑ LoTW —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ.\n\n'
                        f'üíæ –§–∞–π–ª —Å–æ —Å–ø–∏—Å–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–∑—ã–≤–Ω—ã—Ö –Ω–∏–∂–µ üëá \n\n'
                        )
    document = FSInputFile(upload_path)
    await bot.send_document(message.from_user.id, document)


async def get_stat_loc(message: Message, bot: Bot):
    db = Database(os.getenv('DATABASE_NAME'))
    user = db.select_user_id(message.from_user.id)[1]
    stat_loc = db.get_stat_loc(user)
    file = 'logs/' + user + '_QRA.txt'
    upload_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file)
    txt = f'---=== {user}: –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã–µ QRA –ª–æ–∫–∞—Ç–æ—Ä—ã –∏–∑ LoTW ===---\n\n'
    for i in range(len(stat_loc)):
        txt += f'{i+1}: {stat_loc[i][0]}  {stat_loc[i][1]}\n'
    with open(upload_path, 'w', encoding='utf-8') as f:
        f.write(txt)
    await bot.send_message(message.from_user.id, text=
                        f'üìå <b>{user}</b> —É –≤–∞—Å <b>{len(stat_loc)}</b> –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã—Ö QRA –ª–æ–∫–∞—Ç–æ—Ä–∞.\n\n'
                        f'üíæ –§–∞–π–ª —Å–æ —Å–ø–∏—Å–æ–º –ø–æ–¥—Ç–≤–µ—Ä–¥–µ–Ω–Ω—ã—Ö –ª–æ–∫—Ç–æ—Ä–æ–≤ –Ω–∏–∂–µ üëá \n\n'
                        )
    document = FSInputFile(upload_path)
    await bot.send_document(message.from_user.id, document)

    # db = Database(os.getenv('DATABASE_NAME'))
    # user = db.select_user_id(message.from_user.id)[1]
    # page = 0
    # stat_loc = db.get_stat_loc(user)
    # start_offset = page * 50
    # end_offset = start_offset + 50
    # msg = ''
    # n = 0
    # for i in range(math.ceil(len(stat_loc)/50)):
    #     print(f'{math.ceil(len(stat_loc)/50)} –¥–ª–∏–Ω–∞ {len(stat_loc)/50}')
    #     for j in range(50):
    #         print(f'n = {n} = {len(stat_loc)} –î–û–ë–ê–í–ò–õ–ò')
    #         try:
    #             msg += f'{n+1}  ‚óΩÔ∏è {stat_loc[n][0]}  ‚óΩÔ∏è {stat_loc[n][1]}\n'
    #             print(f'{msg} \n')
    #         except:
    #             await bot.send_message(message.from_user.id, text=f'{msg} \n')
    #             return
    #         if j == 49 and n < len(stat_loc):
    #             print(f'n = {n} –í–´–í–ï–õ–ò')
    #             await bot.send_message(message.from_user.id, text=f'{msg} \n')
    #             msg = ''
    #         n += 1
